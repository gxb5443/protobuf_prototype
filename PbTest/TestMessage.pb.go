// Code generated by protoc-gen-go.
// source: TestMessage.proto
// DO NOT EDIT!

/*
Package PbTest is a generated protocol buffer package.

It is generated from these files:
	TestMessage.proto

It has these top-level messages:
	TestMessage
	TestResponse
*/
package PbTest

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type TestMessage_TType int32

const (
	TestMessage_CREATE TestMessage_TType = 0
	TestMessage_UPDATE TestMessage_TType = 1
	TestMessage_DELETE TestMessage_TType = 2
)

var TestMessage_TType_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}
var TestMessage_TType_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x TestMessage_TType) Enum() *TestMessage_TType {
	p := new(TestMessage_TType)
	*p = x
	return p
}
func (x TestMessage_TType) String() string {
	return proto.EnumName(TestMessage_TType_name, int32(x))
}
func (x *TestMessage_TType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestMessage_TType_value, data, "TestMessage_TType")
	if err != nil {
		return err
	}
	*x = TestMessage_TType(value)
	return nil
}

type TestResponse_StatusType int32

const (
	TestResponse_SUCCESS      TestResponse_StatusType = 0
	TestResponse_TYPE_FAILURE TestResponse_StatusType = 1
	TestResponse_FAILURE      TestResponse_StatusType = 2
)

var TestResponse_StatusType_name = map[int32]string{
	0: "SUCCESS",
	1: "TYPE_FAILURE",
	2: "FAILURE",
}
var TestResponse_StatusType_value = map[string]int32{
	"SUCCESS":      0,
	"TYPE_FAILURE": 1,
	"FAILURE":      2,
}

func (x TestResponse_StatusType) Enum() *TestResponse_StatusType {
	p := new(TestResponse_StatusType)
	*p = x
	return p
}
func (x TestResponse_StatusType) String() string {
	return proto.EnumName(TestResponse_StatusType_name, int32(x))
}
func (x *TestResponse_StatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestResponse_StatusType_value, data, "TestResponse_StatusType")
	if err != nil {
		return err
	}
	*x = TestResponse_StatusType(value)
	return nil
}

type TestMessage struct {
	ClientName       *string                `protobuf:"bytes,1,req,name=clientName" json:"clientName,omitempty"`
	ClientId         *int32                 `protobuf:"varint,2,req,name=clientId" json:"clientId,omitempty"`
	Description      *string                `protobuf:"bytes,3,opt,name=description,def=NONE" json:"description,omitempty"`
	MessageItems     []*TestMessage_MsgItem `protobuf:"bytes,4,rep,name=messageItems" json:"messageItems,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *TestMessage) Reset()         { *m = TestMessage{} }
func (m *TestMessage) String() string { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()    {}

const Default_TestMessage_Description string = "NONE"

func (m *TestMessage) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

func (m *TestMessage) GetClientId() int32 {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return 0
}

func (m *TestMessage) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return Default_TestMessage_Description
}

func (m *TestMessage) GetMessageItems() []*TestMessage_MsgItem {
	if m != nil {
		return m.MessageItems
	}
	return nil
}

type TestMessage_MsgItem struct {
	Id               *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ItemName         *string            `protobuf:"bytes,2,opt,name=itemName" json:"itemName,omitempty"`
	ItemValue        *int32             `protobuf:"varint,3,opt,name=itemValue" json:"itemValue,omitempty"`
	TransactionType  *TestMessage_TType `protobuf:"varint,4,opt,name=transaction_type,enum=PbTest.TestMessage_TType" json:"transaction_type,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *TestMessage_MsgItem) Reset()         { *m = TestMessage_MsgItem{} }
func (m *TestMessage_MsgItem) String() string { return proto.CompactTextString(m) }
func (*TestMessage_MsgItem) ProtoMessage()    {}

func (m *TestMessage_MsgItem) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TestMessage_MsgItem) GetItemName() string {
	if m != nil && m.ItemName != nil {
		return *m.ItemName
	}
	return ""
}

func (m *TestMessage_MsgItem) GetItemValue() int32 {
	if m != nil && m.ItemValue != nil {
		return *m.ItemValue
	}
	return 0
}

func (m *TestMessage_MsgItem) GetTransactionType() TestMessage_TType {
	if m != nil && m.TransactionType != nil {
		return *m.TransactionType
	}
	return TestMessage_CREATE
}

type TestResponse struct {
	FunctionName     *string                  `protobuf:"bytes,1,req,name=functionName" json:"functionName,omitempty"`
	Status           *TestResponse_StatusType `protobuf:"varint,2,req,name=status,enum=PbTest.TestResponse_StatusType" json:"status,omitempty"`
	Error            *string                  `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Solution         *int32                   `protobuf:"varint,4,opt,name=solution" json:"solution,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}

func (m *TestResponse) GetFunctionName() string {
	if m != nil && m.FunctionName != nil {
		return *m.FunctionName
	}
	return ""
}

func (m *TestResponse) GetStatus() TestResponse_StatusType {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TestResponse_SUCCESS
}

func (m *TestResponse) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *TestResponse) GetSolution() int32 {
	if m != nil && m.Solution != nil {
		return *m.Solution
	}
	return 0
}

func init() {
	proto.RegisterEnum("PbTest.TestMessage_TType", TestMessage_TType_name, TestMessage_TType_value)
	proto.RegisterEnum("PbTest.TestResponse_StatusType", TestResponse_StatusType_name, TestResponse_StatusType_value)
}
